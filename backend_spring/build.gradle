/*
 * SWN Char Gen Â© 2025. by Tod Casasent is licensed under CC BY-NC-SA 4.0. To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/
 *
 * Rules and values associated with the SWN system are the copyright of Kevin Crawford, Sine Nominee Publishing.
 * https://sine-nomine-publishing.myshopify.com/
 * Used in accordance with his Discord message of limiting content to the free version of the rules.
 * Specifically, the SWNSystem.java and swn_system.py game strings, values, and relationship are the copyright of Kevin Crawford, Sine Nominee Publishing.
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.+'
    id 'io.spring.dependency-management' version '1.1.+'
}

group = 'org.kuroneko.swn_char_gen'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:5.+'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.+'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test', Test) {
    useJUnitPlatform()

    // Add JVM args in a type-safe way
    jvmArgs "-Xshare:off"

    doFirst {
        // Resolve the byte-buddy-agent jar from the testRuntimeClasspath
        def agentFile = configurations.testRuntimeClasspath.files.find { File f -> f.name.contains('byte-buddy-agent') }
        if (agentFile) {
            // Call jvmArgs on the Test task explicitly to avoid unresolved reference in IDE
            (it as Test).jvmArgs("-javaagent:${agentFile.absolutePath}")
        }
    }
}
